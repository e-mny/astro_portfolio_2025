---
import type { HTMLAttributes } from "astro/types";

interface Props extends HTMLAttributes<"a"> {
  text: string;
  addClass?: string;
}
const { text, addClass, href, ...props } = Astro.props;
let isActive: boolean;

// Get the current path from Astro URL
const currentPath = Astro.url?.pathname || "";

// Ensure `href` is a string and not a complex object
const hrefPath = typeof href === "string" ? href : href?.href || "";

// Create URL objects for comparison
const currentUrl = new URL(currentPath, "https://dummy.com"); // Dummy base URL to avoid issues
const hrefUrl = new URL(hrefPath, "https://dummy.com");

// Strip out the trailing slashes for consistent comparison
const normalizedCurrentPath = currentUrl.pathname.replace(/\/$/, "");
const normalizedHrefPath = hrefUrl.pathname.replace(/\/$/, "");

// Compare paths (with normalization)
if (
  normalizedHrefPath === "/" &&
  (normalizedCurrentPath === "/" || normalizedCurrentPath === "")
) {
  isActive = true; // Treat home page as active if it's either "/" or ""
} else {
  isActive = normalizedCurrentPath === normalizedHrefPath; // Compare normalized paths
}
---

<a
  class:list={[
    "px-4 py-2 text-base md:text-sm font-medium capitalize transition-all duration-300",
    {
      "dark:text-bluePrimary text-blue-600 border-b-2 border-blue-400 dark:border-blue-600":
        isActive, // Active link styles
    },
    {
      "dark:text-white text-white dark:hover:text-skyblue animated-link":
        !isActive, // Default styles
    },
    addClass,
  ]}
  aria-current={isActive ? "page" : undefined}
  href={href}
  {...props}
  aria-label={`Go to ${text} page`}
>
  {text}
  {normalizedCurrentPath}
  {normalizedHrefPath}
</a>
