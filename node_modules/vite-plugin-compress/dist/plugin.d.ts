import { Plugin } from 'vite';
import { Options as PngOptions } from 'imagemin-pngquant';
declare type PluginOptions = {
    /**
     * Log compressed files and their compression ratios.
     */
    verbose?: boolean;
    /**
     * Set false to disable Brotli compression.
     * Useful when your web server handles compression.
     * @default true
     */
    brotli?: boolean;
    /**
     * Brotli compression quality (from `0` to `11`).
     * @default 11
     */
    quality?: number;
    /**
     * Minimum file size before compression is used.
     * @default 1501
     */
    threshold?: number;
    /**
     * Globs to exclude certain files from being compressed.
     */
    exclude?: string[];
    /**
     * Additional extensions for Brotli compression.
     */
    extensions?: string[];
    /**
     * Set false to disable the SVG optimizer.
     */
    svgo?: SvgOptions | false;
    /**
     * Set false to disable the PNG optimizer.
     */
    pngquant?: PngOptions | false;
};
declare const _default: (opts?: PluginOptions) => Plugin;
export default _default;
export { PngOptions };
export declare type SvgOptions = Partial<Remap<UnionToIntersection<import('svgo').PluginConfig>>>;
declare type Remap<T> = {} & {
    [P in keyof T]: T[P];
};
declare type UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any ? R : never;
