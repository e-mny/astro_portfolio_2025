"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.minifyCss = void 0;
const debug_1 = __importDefault(require("debug"));
const clean_css_1 = __importDefault(require("clean-css"));
const debug = (0, debug_1.default)('vite:plugin-compress');
// Wrap CSS declarations for CleanCSS > 3.x
// See https://github.com/jakubpawlowicz/clean-css/issues/418
const wrapCss = (css, type) => type == 'inline'
    ? '*{' + css + '}'
    : type == 'media'
        ? '@media ' + css + '{a{top:0}}'
        : css;
const unwrapCss = (css, type) => {
    var _a, _b;
    return (_b = (_a = (type == 'inline'
        ? css.match(/^\*\{([\s\S]*)\}$/)
        : type == 'media'
            ? css.match(/^@media ([\s\S]*?)\s*{[\s\S]*}$/)
            : null)) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : css;
};
function minifyCss(minifyCss) {
    if (minifyCss === false || typeof minifyCss === 'function') {
        return minifyCss;
    }
    const cssOptions = minifyCss !== true ? minifyCss : undefined;
    const defaultMinifier = new clean_css_1.default(cssOptions);
    // Play nicely with SSR hydration when minifying inline "style" attributes.
    const inlineMinifier = (cssOptions === null || cssOptions === void 0 ? void 0 : cssOptions.level) !== 0
        ? new clean_css_1.default({ ...cssOptions, level: 0 })
        : defaultMinifier;
    return (css, type) => {
        const minifier = type == 'inline' ? inlineMinifier : defaultMinifier;
        const output = minifier.minify(wrapCss(css, type));
        if (output.errors.length > 0) {
            debug(`Failed to minify CSS:\n  ${output.errors.join(`\n  `)}`);
            return css;
        }
        return unwrapCss(output.styles, type);
    };
}
exports.minifyCss = minifyCss;
//# sourceMappingURL=css.js.map